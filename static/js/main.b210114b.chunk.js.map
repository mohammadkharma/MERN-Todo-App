{"version":3,"sources":["components/create-todo.component.js","components/todos-list.component.js","components/edit-todo.component.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","props","onChangeTodoDescription","bind","onChangeTodoResponsible","onChangeTodoPriority","onSubmit","state","todo_description","todo_responsible","todo_priority","todo_completed","e","this","setState","target","value","preventDefault","console","log","newTodo","axios","post","then","res","data","style","marginTop","className","type","onChange","name","id","checked","Component","Todo","todo","to","_id","TodoList","todos","get","catch","err","map","currentTodo","i","key","todoList","EditTodo","onChangeTodoCompleted","match","params","obj","history","push","htmlFor","App","path","exact","component","TodosList","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b210114b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class CreateTodo extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n        this.onChangeTodoResponsible = this.onChangeTodoResponsible.bind(this);\n        this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            todo_description: '',\n            todo_responsible: '',\n            todo_priority: '',\n            todo_completed: false\n        }\n    }\n\n    onChangeTodoDescription(e) {\n        this.setState({\n            todo_description: e.target.value\n        });\n    }\n\n    onChangeTodoResponsible(e) {\n        this.setState({\n            todo_responsible: e.target.value\n        });\n    }\n\n    onChangeTodoPriority(e) {\n        this.setState({\n            todo_priority: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        console.log(\"Form submitted\");\n        console.log(`Form Description: ${this.state.todo_description}`);\n        console.log(`Form Responsible: ${this.state.todo_responsible}`);\n        console.log(`Form Priority: ${this.state.todo_priority}`);\n        console.log(`Form Completed: ${this.state.todo_completed}`);\n\n        const newTodo = {\n            todo_description: this.state.todo_description,\n            todo_responsible: this.state.todo_responsible,\n            todo_priority: this.state.todo_priority,\n            todo_completed: this.state.todo_completed\n        }\n\n        axios.post('http://localhost:4000/todos/add', newTodo)\n            .then(res => console.log(res.data));\n\n        this.setState({\n            todo_description: '',\n            todo_responsible: '',\n            todo_priority: '',\n            todo_completed: false\n        });\n    }\n\n\n\n    render() {\n        return (\n            <div style={{ marginTop: 20 }}>\n\n                <h3>Create New Todo</h3>\n\n                <form onSubmit={this.onSubmit}>\n\n                    {/* Description */}\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.todo_description}\n                            onChange={this.onChangeTodoDescription}\n                        />\n                    </div>\n\n                    {/* Responsible */}\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.todo_responsible}\n                            onChange={this.onChangeTodoResponsible}\n                        />\n                    </div>\n\n                    {/* Priority */}\n                    <div className=\"form-group\">\n\n                        {/* Low */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityLow\"\n                                value=\"Low\"\n                                checked={this.state.todo_priority === 'Low'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n\n                        {/* Medium */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityMedium\"\n                                value=\"Medium\"\n                                checked={this.state.todo_priority === 'Medium'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n\n                        {/* High */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityHigh\"\n                                value=\"High\"\n                                checked={this.state.todo_priority === 'High'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n\n                    </div>\n\n                    {/* Submit */}\n                    <div className=\"form-group\">\n                        <input type=\"submit\"\n                            className=\"btn btn-primary\"\n                            value=\"Create Todo\"\n                        />\n                    </div>\n\n                </form>\n\n            </div>\n        );\n    }\n}","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Todo = props => (\n    <tr>\n        <td className={props.todo.todo_completed ? 'completed' : ''}> {props.todo.todo_description} </td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}> {props.todo.todo_responsible} </td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}> {props.todo.todo_priority} </td>\n        <td>\n            <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\n        </td>\n    </tr>\n)\nexport default class TodoList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { todos: [] };\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/todos/')\n            .then(res => {\n                this.setState({ todos: res.data });\n            })\n            .catch(err => console.log(err));\n    }\n\n    componentDidUpdate() {\n        axios.get('http://localhost:4000/todos/')\n            .then(res => {\n                this.setState({ todos: res.data });\n            })\n            .catch(err => console.log(err));\n    }\n\n    todoList() {\n        return this.state.todos.map(function (currentTodo, i) {\n            return <Todo todo={currentTodo} key={i} />\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Todos List</h3>\n                <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n                    <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Responsible</th>\n                            <th>Priority</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.todoList()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class EditTodo extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n        this.onChangeTodoResponsible = this.onChangeTodoResponsible.bind(this);\n        this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n        this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            todo_description: '',\n            todo_responsible: '',\n            todo_priority: '',\n            todo_completed: false\n        }\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/todos/' + this.props.match.params.id)\n            .then(res => {\n                this.setState({\n                    todo_description: res.data.todo_description,\n                    todo_responsible: res.data.todo_responsible,\n                    todo_priority: res.data.todo_priority,\n                    todo_completed: res.data.todo_completed\n                });\n            })\n            .catch(err => console.log(err));\n    }\n\n    onChangeTodoDescription(e) {\n        this.setState({\n            todo_description: e.target.value\n        });\n    }\n\n    onChangeTodoResponsible(e) {\n        this.setState({\n            todo_responsible: e.target.value\n        });\n    }\n\n    onChangeTodoPriority(e) {\n        this.setState({\n            todo_priority: e.target.value\n        });\n    }\n\n    onChangeTodoCompleted(e) {\n        this.setState({\n            todo_completed: !this.state.todo_completed\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const obj = {\n            todo_description: this.state.todo_description,\n            todo_responsible: this.state.todo_responsible,\n            todo_priority: this.state.todo_priority,\n            todo_completed: this.state.todo_completed\n        }\n\n        axios.post('http://localhost:4000/todos/update/'+this.props.match.params.id, obj)\n            .then(res => console.log(res.data));\n\n        this.props.history.push('/');\n\n    }\n\n    render() {\n        return (\n            <div>\n\n                <h3>Update Todo</h3>\n\n                <form onSubmit={this.onSubmit}>\n\n                    {/* Description */}\n                    <div className=\"form-group\">\n                        <label>Description</label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.todo_description}\n                            onChange={this.onChangeTodoDescription}\n                        />\n                    </div>\n\n                    {/* Responsible */}\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.todo_responsible}\n                            onChange={this.onChangeTodoResponsible}\n                        />\n                    </div>\n\n                    {/* Priority */}\n                    <div className=\"form-group\">\n\n                        {/* Low */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityLow\"\n                                value=\"Low\"\n                                checked={this.state.todo_priority === 'Low'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n\n                        {/* Medium */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityMedium\"\n                                value=\"Medium\"\n                                checked={this.state.todo_priority === 'Medium'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n\n                        {/* High */}\n                        <div className=\"form-check form-check-inline\">\n                            <input type=\"radio\"\n                                className=\"form-check-input\"\n                                name=\"priorityOptions\"\n                                id=\"priorityHigh\"\n                                value=\"High\"\n                                checked={this.state.todo_priority === 'High'}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n\n                    </div>\n\n                    {/* Completed checkbox */}\n                    <div className=\"form-check\">\n                        <input type=\"checkbox\"\n                            className=\"form-check-input\"\n                            name=\"completedCheckbox\"\n                            id=\"completedCheckbox\"\n                            value={this.state.todo_completed}\n                            checked={this.state.todo_completed}\n                            onChange={this.onChangeTodoCompleted}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                            Completed\n                            </label>\n                    </div>\n\n                    <br />\n\n                    {/* Submit */}\n                    <div className=\"form-group\">\n                        <input type=\"submit\"\n                            className=\"btn btn-primary\"\n                            value=\"Update Todo\"\n                        />\n                    </div>\n\n                </form>\n\n            </div>\n        );\n    }\n}","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport CreateTodo from \"./components/create-todo.component\";\nimport TodosList from \"./components/todos-list.component\";\nimport EditTodo from \"./components/edit-todo.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import logo from \"./loupe.png\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            {/* <a className=\"navbar-brand\" href=\"https://www.google.com/#cns=0\" target=\"_bank\">\n              <img src={logo} width=\"30\" height=\"30\" alt=\"logo\" />\n            </a> */}\n            <Link to=\"/\" className=\"navbar-brand\">MERN-Stack Todo App</Link>\n            <div>\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Todos</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n\n          <Route path=\"/\" exact component={TodosList} />\n          <Route path=\"/edit/:id\" component={EditTodo} />\n          <Route path=\"/create\" component={CreateTodo} />\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}